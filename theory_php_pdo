Для взаимодействия с БД, ПХП предоставляет 3 механизма:
1. mysql_connect - устаревшая.
2. mysqli_connect - еще функционирует, но сохранила все те недостатки, что есть в 1-м
3. PDO - php-data-object класс для работы с БД в ОО режиме.

    PDO

1. Создаем экземпляр данного класса.
$dbh(data base handler) = new PDO ((строка подключения к базе(тип, какая база, кодировка,)),
имя пользователя и пароль,массив настроек базы(режим выборки, режим вывода ошибок))

$dbh(data base handler) = new PDO ("mysql:dbname='dbname';host=127.0.0.1;port=3306";
charset=utf8,
username:"root",passwd:"",
[PDO::ATTR_ERRMODE=>PDO::ERRMODE_EXCEPTION,
 PDO::ATTR_DEFAULT_FETCH_MODE
 (то в каком виде будет представлена строка табл)=>PDO::FETCH_ASSOC (ассоциативным массивом)
],
);

    Запросы

Для того, чтобы сделать запрос в базу, существует ряд методов, в зависимости от
того, что мы хотим сделать.
    Команда exec
Используется для того, чтобы добавить что-либо в базу, не требует получения ответа.
dbh->exec("INSERT INTO `table`...");

    Команда query
Будет возвращать результат выборки.
dbh->query("SELECT * FROM `table`");
В результате мы получим объект класса PDO statement.
$stmt=dbh->query("SELECT * FROM `table`");
Получаем записи
$stmt->fetch() - возвращает одну запись;
Если мы хотим выбрать все записи
while ($arr = $stmt->fetch()){
    print_r($arr);
}
В данном случае в методе fetch мы можем передать параметр выборки, например
$stmt->fetch(PDO::FETCH_OBJ) - получим объект;
Например если в результате выборки у нас будет только одна колонка, например имя,
тогда удобно будет параметром задать:
while (($name = $stmt->fetch(PDO::FETCH_COLUMN))!==false){
    print_r($name);
}
Аналогично сработает и
while (($name = $stmt->fetchColumn())!==false){
    print_r($name);
}
Если не хочется получать построчно можно вывести след образом
$stmt=dbh->query("SELECT name FROM `table`");
$res = $stmt->fetchAll();
В данном случае результатом у нас будет массив, каждый эл-т которого явл ассоц массивом

    Проблемы безопасности в таком методе
например мы хотим выбрать имя, которое содержит какие-либо буквы:
$stmt=dbh->query("SELECT name FROM `table` WHERE name LIKE '%{$_GET['name']}%'");
$res = $stmt->fetchAll();
Тогда в строке браузера злоумышленник может написать след:
127.0.0.1/?n=';DELETE FROM `name`;
Т.е. в данном случае у нас выполнится запрос, который придумал пользователь, что
категорически недопустимо!

Как делать правильно?!

1. Вариант. Использовать механизм экранирования.
$data=$dbh->quote($_GET['name']);
$data=substr($data,1,strlen($data)-2);
$stmt=dbh->query("SELECT name FROM `table` WHERE name LIKE '%{$data}%'");
$res = $stmt->fetchAll();
В таком случае у нас данные станут безопасными.

2. Более надежный и универсальный. Подготовленные запросы.

$stmt = $dbh->prepare("SELECT name FROM `table` WHERE name LIKE ?");
Теперь биндим параметры:
$stmt->bindValue(1,"%$_GET['name']%",PDO::PARAM_INT (или PDO::PARAM_STR));
$stmt->execute();
$res = $stmt->fetchAll();
Таким образом мы не сможем пробросить сюда часть запроса, т.к. запрос готовится
заранее.
Или второй вариант, когда мы значение пробрасываем в сам execute при помощи массива
$stmt = $dbh->prepare("SELECT name FROM `table` WHERE name LIKE ?");
$stmt->execute(["%$_GET['name']%"]);
$res = $stmt->fetchAll();

Кроме знаков ? могут быть также именованные параметры.
В данном случае мы пишем $stmt = $dbh->prepare("SELECT name FROM `table` WHERE name LIKE :x");
Где х - имя параметра.
А в массиве укажем что будет являться значением для х:
$stmt->execute(['x'=>"%$_GET['name']%"]);
